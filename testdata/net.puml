
@startuml

set namespaceSeparator /

interface error {
}

class io/PipeReader {
}

class io/PipeWriter {
}

interface io/Reader {
}

interface io/Writer {
}

interface io/Closer {
}

interface io/ReadWriter {
}

interface io/ReadCloser {
}

interface io/WriteCloser {
}

interface io/ReadWriteCloser {
}

interface io/ReaderFrom {
}

class net/Interface {
	+Index int
	+MTU int
	+Name string
	+Addrs() ([]Addr, error)
	+MulticastAddrs() ([]Addr, error)
}

class net/UDPAddr {
	+Port int
	+Zone string
	+Network() string
	+String() string
	~family() int
	~isWildcard() bool
	~opAddr() Addr
	~sockaddr(family int) (syscall.Sockaddr, error)
}

class net/IPConn {
	+ReadFrom(b []byte) (int, Addr, error)
	+ReadFromIP(b []byte) (int, *IPAddr, error)
	+ReadMsgIP(b []byte, oob []byte) (n int, oobn int, flags int, addr *IPAddr, err error)
	+WriteMsgIP(b []byte, oob []byte, addr *IPAddr) (n int, oobn int, err error)
	+WriteTo(b []byte, addr Addr) (int, error)
	+WriteToIP(b []byte, addr *IPAddr) (int, error)
}

class net/file {
	~atEOF bool
	~data []byte
	~close()
	~getLineFromData() (s string, ok bool)
	~readLine() (s string, ok bool)
}

class net/TCPAddr {
	+Port int
	+Zone string
	+Network() string
	+String() string
	~family() int
	~isWildcard() bool
	~opAddr() Addr
	~sockaddr(family int) (syscall.Sockaddr, error)
}

class net/UDPConn {
	+ReadFrom(b []byte) (int, Addr, error)
	+ReadFromUDP(b []byte) (int, *UDPAddr, error)
	+ReadMsgUDP(b []byte, oob []byte) (n int, oobn int, flags int, addr *UDPAddr, err error)
	+WriteMsgUDP(b []byte, oob []byte, addr *UDPAddr) (n int, oobn int, err error)
	+WriteTo(b []byte, addr Addr) (int, error)
	+WriteToUDP(b []byte, addr *UDPAddr) (int, error)
	~readDNSResponse() (*dnsMsg, error)
	~writeDNSQuery(msg *dnsMsg) error
}

class net/dnsConfig {
	~attempts int
	~err error
	~lookup []string
	~ndots int
	~rotate bool
	~search []string
	~servers []string
	~timeout int
	~unknownOpt bool
	~nameList(name string) []string
}

class net/pollDesc {
	~runtimeCtx uintptr
	+Close()
	+Evict()
	+Init(fd *netFD) error
	+Prepare(mode int) error
	+PrepareRead() error
	+PrepareWrite() error
	+Wait(mode int) error
	+WaitCanceled(mode int)
	+WaitCanceledRead()
	+WaitCanceledWrite()
	+WaitRead() error
	+WaitWrite() error
}

class net/resolverConfig {
	~ch chan struct{}
	~init()
	~releaseSema()
	~tryAcquireSema() bool
	~tryUpdate(name string)
}

class net/racer {
	~error error
	~fqdn string
}

class net/SRV {
	+Port uint16
	+Priority uint16
	+Target string
	+Weight uint16
}

class net/MX {
	+Host string
	+Pref uint16
}

class net/NS {
	+Host string
}

class net/netFD {
	~family int
	~isConnected bool
	~net string
	~sotype int
	~sysfd int
	+Close() error
	+Read(p []byte) (n int, err error)
	+Write(p []byte) (nn int, err error)
	~accept() (netfd *netFD, err error)
	~addrFunc() func(syscall.Sockaddr) Addr
	~closeRead() error
	~closeWrite() error
	~connect(la syscall.Sockaddr, ra syscall.Sockaddr, deadline time.Time, cancel <-chan struct{}) error
	~decref()
	~destroy()
	~dial(laddr sockaddr, raddr sockaddr, deadline time.Time, cancel <-chan struct{}) error
	~dup() (f *os.File, err error)
	~eofError(n int, err error) error
	~incref() error
	~init() error
	~listenDatagram(laddr sockaddr) error
	~listenStream(laddr sockaddr, backlog int) error
	~name() string
	~readFrom(p []byte) (n int, sa syscall.Sockaddr, err error)
	~readLock() error
	~readMsg(p []byte, oob []byte) (n int, oobn int, flags int, sa syscall.Sockaddr, err error)
	~readUnlock()
	~setAddr(laddr Addr, raddr Addr)
	~setDeadline(t time.Time) error
	~setReadDeadline(t time.Time) error
	~setWriteDeadline(t time.Time) error
	~shutdown(how int) error
	~writeLock() error
	~writeMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oobn int, err error)
	~writeTo(p []byte, sa syscall.Sockaddr) (n int, err error)
	~writeUnlock()
}

class net/UnixConn {
	+CloseRead() error
	+CloseWrite() error
	+ReadFrom(b []byte) (int, Addr, error)
	+ReadFromUnix(b []byte) (int, *UnixAddr, error)
	+ReadMsgUnix(b []byte, oob []byte) (n int, oobn int, flags int, addr *UnixAddr, err error)
	+WriteMsgUnix(b []byte, oob []byte, addr *UnixAddr) (n int, oobn int, err error)
	+WriteTo(b []byte, addr Addr) (n int, err error)
	+WriteToUnix(b []byte, addr *UnixAddr) (int, error)
}

class net/UnixListener {
	~path string
	~unlink bool
	+Accept() (c Conn, err error)
	+AcceptUnix() (*UnixConn, error)
	+Addr() Addr
	+Close() error
	+File() (f *os.File, err error)
	+SetDeadline(t time.Time) error
}

class net/IPNet {
	+Contains(ip IP) bool
	+Network() string
	+String() string
}

class net/conn {
	+Close() error
	+File() (f *os.File, err error)
	+LocalAddr() Addr
	+Read(b []byte) (int, error)
	+RemoteAddr() Addr
	+SetDeadline(t time.Time) error
	+SetReadBuffer(bytes int) error
	+SetReadDeadline(t time.Time) error
	+SetWriteBuffer(bytes int) error
	+SetWriteDeadline(t time.Time) error
	+Write(b []byte) (int, error)
	~ok() bool
}

class net/OpError {
	+Err error
	+Net string
	+Op string
	+Error() string
	+Temporary() bool
	+Timeout() bool
}

class net/timeoutError {
	+Error() string
	+Temporary() bool
	+Timeout() bool
}

class net/ParseError {
	+Text string
	+Type string
	+Error() string
}

class net/AddrError {
	+Addr string
	+Err string
	+Error() string
	+Temporary() bool
	+Timeout() bool
}

class net/DNSConfigError {
	+Err error
	+Error() string
	+Temporary() bool
	+Timeout() bool
}

class net/DNSError {
	+Err string
	+IsTemporary bool
	+IsTimeout bool
	+Name string
	+Server string
	+Error() string
	+Temporary() bool
	+Timeout() bool
}

class net/writerOnly {
}

class net/conf {
	~dnsDebugLevel int
	~forceCgoLookupHost bool
	~goos string
	~hasMDNSAllow bool
	~netCgo bool
	~netGo bool
	~canUseCgo() bool
	~hostLookupOrder(hostname string) ret hostLookupOrder
}

class net/TCPConn {
	+CloseRead() error
	+CloseWrite() error
	+ReadFrom(r io.Reader) (int64, error)
	+SetKeepAlive(keepalive bool) error
	+SetKeepAlivePeriod(d time.Duration) error
	+SetLinger(sec int) error
	+SetNoDelay(noDelay bool) error
	~readDNSResponse() (*dnsMsg, error)
	~writeDNSQuery(msg *dnsMsg) error
}

class net/TCPListener {
	+Accept() (Conn, error)
	+AcceptTCP() (*TCPConn, error)
	+Addr() Addr
	+Close() error
	+File() (f *os.File, err error)
	+SetDeadline(t time.Time) error
}

class net/Dialer {
	+Cancel <-chan struct{}
	+DualStack bool
	+Dial(network string, address string) (Conn, error)
	~deadline(now time.Time) time.Time
	~dialDNS(network string, server string) (dnsConn, error)
	~fallbackDelay() time.Duration
}

class net/dialContext {
	~address string
	~network string
}

class net/dialResult {
	~error error
	~primary bool
}

class net/IPAddr {
	+Zone string
	+Network() string
	+String() string
	~family() int
	~isWildcard() bool
	~opAddr() Addr
	~sockaddr(family int) (syscall.Sockaddr, error)
}

class net/UnixAddr {
	+Name string
	+Net string
	+Network() string
	+String() string
	~family() int
	~isWildcard() bool
	~opAddr() Addr
	~sockaddr(family int) (syscall.Sockaddr, error)
}

class net/nssConf {
	~err error
	~sources map[string][]nssSource
}

class net/nssSource {
	~source string
	~standardCriteria() bool
}

class net/nssCriterion {
	~action string
	~negate bool
	~status string
	~standardStatusAction(last bool) bool
}

class net/fdMutex {
	~rsema uint32
	~state uint64
	~wsema uint32
	+Decref() bool
	+Incref() bool
	+IncrefAndClose() bool
	+RWLock(read bool) bool
	+RWUnlock(read bool) bool
}

class net/ipAttr {
	+Label uint8
	+Precedence uint8
}

class net/byRFC6724 {
	+Len() int
	+Less(i int, j int) bool
	+Swap(i int, j int)
}

class net/policyTableEntry {
	+Label uint8
	+Precedence uint8
}

class net/pipe {
	+Close() error
	+LocalAddr() Addr
	+RemoteAddr() Addr
	+SetDeadline(t time.Time) error
	+SetReadDeadline(t time.Time) error
	+SetWriteDeadline(t time.Time) error
}

class net/dnsHeader {
	+Ancount uint16
	+Arcount uint16
	+Bits uint16
	+Id uint16
	+Nscount uint16
	+Qdcount uint16
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsQuestion {
	+Name string
	+Qclass uint16
	+Qtype uint16
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_Header {
	+Class uint16
	+Name string
	+Rdlength uint16
	+Rrtype uint16
	+Ttl uint32
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_CNAME {
	+Cname string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_HINFO {
	+Cpu string
	+Os string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_MB {
	+Mb string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_MG {
	+Mg string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_MINFO {
	+Email string
	+Rmail string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_MR {
	+Mr string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_MX {
	+Mx string
	+Pref uint16
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_NS {
	+Ns string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_PTR {
	+Ptr string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_SOA {
	+Expire uint32
	+Mbox string
	+Minttl uint32
	+Ns string
	+Refresh uint32
	+Retry uint32
	+Serial uint32
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_TXT {
	+Txt string
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_SRV {
	+Port uint16
	+Priority uint16
	+Target string
	+Weight uint16
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_A {
	+A uint32
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsRR_AAAA {
	+AAAA []byte
	+Header() *dnsRR_Header
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsMsgHdr {
	~authoritative bool
	~id uint16
	~opcode int
	~rcode int
	~recursion_available bool
	~recursion_desired bool
	~response bool
	~truncated bool
	+Walk(f func(v interface{}, name string, tag string) bool) bool
}

class net/dnsMsg {
	+Pack() (msg []byte, ok bool)
	+String() string
	+Unpack(msg []byte) bool
}

interface net/dnsDialer {
	~dialDNS(string, string) (dnsConn, error)
}

interface net/dnsConn {
	+SetDeadline(time.Time) error
	~readDNSResponse() (*dnsMsg, error)
	~writeDNSQuery(*dnsMsg) error
}

interface net/sockaddr {
	~family() int
	~isWildcard() bool
	~sockaddr(family int) (syscall.Sockaddr, error)
}

interface net/Addr {
	+Network() string
	+String() string
}

interface net/Conn {
	+Close() error
	+LocalAddr() Addr
	+Read(b []byte) (n int, err error)
	+RemoteAddr() Addr
	+SetDeadline(t time.Time) error
	+SetReadDeadline(t time.Time) error
	+SetWriteDeadline(t time.Time) error
	+Write(b []byte) (n int, err error)
}

interface net/PacketConn {
	+Close() error
	+LocalAddr() Addr
	+ReadFrom(b []byte) (n int, addr Addr, err error)
	+SetDeadline(t time.Time) error
	+SetReadDeadline(t time.Time) error
	+SetWriteDeadline(t time.Time) error
	+WriteTo(b []byte, addr Addr) (n int, err error)
}

interface net/Listener {
	+Accept() (Conn, error)
	+Addr() Addr
	+Close() error
}

interface net/Error {
	+Temporary() bool
	+Timeout() bool
}

interface net/timeout {
	+Timeout() bool
}

interface net/temporary {
	+Temporary() bool
}

interface net/dnsStruct {
	+Walk(f func(v interface{}, name string, tag string) ok bool) ok bool
}

interface net/dnsRR {
	+Header() *dnsRR_Header
}
"net/Interface" -> "net/HardwareAddr": HardwareAddr
"net/Interface" -> "net/Flags": Flags
"net/UDPAddr" -> "net/IP": IP
"net/UDPAddr" .|> "net/sockaddr"
"net/IPConn" *- "net/conn"
"net/IPConn" .|> "net/PacketConn"
"net/file" -> "os/File": file
"net/TCPAddr" -> "net/IP": IP
"net/TCPAddr" .|> "net/sockaddr"
"net/UDPConn" *- "net/conn"
"net/UDPConn" .|> "net/PacketConn"
"net/UDPConn" .|> "net/dnsConn"
"net/resolverConfig" -> "sync/Once": initOnce
"net/resolverConfig" -> "time/Time": lastChecked
"net/resolverConfig" -> "time/Time": modTime
"net/resolverConfig" -> "sync/RWMutex": mu
"net/resolverConfig" -> "net/dnsConfig": dnsConfig
"net/racer" -> "*"  "net/dnsRR": rrs
"net/racer" -() "error"
"net/netFD" -> "net/fdMutex": fdmu
"net/netFD" -> "net/Addr": laddr
"net/netFD" -> "net/Addr": raddr
"net/netFD" -> "net/pollDesc": pd
"net/netFD" .|> "io/Closer"
"net/netFD" .|> "io/ReadCloser"
"net/netFD" .|> "io/ReadWriteCloser"
"net/netFD" .|> "io/ReadWriter"
"net/netFD" .|> "io/Reader"
"net/netFD" .|> "io/WriteCloser"
"net/netFD" .|> "io/Writer"
"net/UnixConn" *- "net/conn"
"net/UnixConn" .|> "net/PacketConn"
"net/UnixListener" -> "net/netFD": fd
"net/UnixListener" .|> "io/Closer"
"net/UnixListener" .|> "net/Listener"
"net/IPNet" -> "net/IP": IP
"net/IPNet" -> "net/IPMask": Mask
"net/IPNet" .|> "net/Addr"
"net/conn" -> "net/netFD": fd
"net/conn" .|> "io/Closer"
"net/conn" .|> "io/ReadCloser"
"net/conn" .|> "io/ReadWriteCloser"
"net/conn" .|> "io/ReadWriter"
"net/conn" .|> "io/Reader"
"net/conn" .|> "io/WriteCloser"
"net/conn" .|> "io/Writer"
"net/conn" .|> "net/Conn"
"net/OpError" -> "net/Addr": Source
"net/OpError" -> "net/Addr": Addr
"net/OpError" .|> "net/Error"
"net/OpError" .|> "net/temporary"
"net/OpError" .|> "net/timeout"
"net/timeoutError" .|> "net/Error"
"net/timeoutError" .|> "net/temporary"
"net/timeoutError" .|> "net/timeout"
"net/ParseError" -() "error"
"net/AddrError" .|> "net/Error"
"net/AddrError" .|> "net/temporary"
"net/AddrError" .|> "net/timeout"
"net/DNSConfigError" .|> "net/Error"
"net/DNSConfigError" .|> "net/temporary"
"net/DNSConfigError" .|> "net/timeout"
"net/DNSError" .|> "net/Error"
"net/DNSError" .|> "net/temporary"
"net/DNSError" .|> "net/timeout"
"net/writerOnly" *- "io/Writer"
"net/writerOnly" .|> "io/Writer"
"net/conf" -> "net/nssConf": nss
"net/conf" -> "net/dnsConfig": resolv
"net/TCPConn" *- "net/conn"
"net/TCPConn" .|> "io/ReaderFrom"
"net/TCPConn" .|> "net/dnsConn"
"net/TCPListener" -> "net/netFD": fd
"net/TCPListener" .|> "io/Closer"
"net/TCPListener" .|> "net/Listener"
"net/Dialer" -> "time/Duration": Timeout
"net/Dialer" -> "time/Time": Deadline
"net/Dialer" -> "net/Addr": LocalAddr
"net/Dialer" -> "time/Duration": FallbackDelay
"net/Dialer" -> "time/Duration": KeepAlive
"net/Dialer" .|> "net/dnsDialer"
"net/dialContext" *- "net/Dialer"
"net/dialContext" -> "time/Time": finalDeadline
"net/dialResult" *- "net/Conn"
"net/dialResult" -() "error"
"net/dialResult" .|> "io/Closer"
"net/dialResult" .|> "io/ReadCloser"
"net/dialResult" .|> "io/ReadWriteCloser"
"net/dialResult" .|> "io/ReadWriter"
"net/dialResult" .|> "io/Reader"
"net/dialResult" .|> "io/WriteCloser"
"net/dialResult" .|> "io/Writer"
"net/dialResult" .|> "net/Conn"
"net/IPAddr" -> "net/IP": IP
"net/IPAddr" .|> "net/sockaddr"
"net/UnixAddr" .|> "net/sockaddr"
"net/nssSource" -> "*"  "net/nssCriterion": criteria
"net/ipAttr" -> "net/scope": Scope
"net/byRFC6724" -> "*"  "net/IPAddr": addrs
"net/byRFC6724" -> "*"  "net/ipAttr": addrAttr
"net/byRFC6724" -> "*"  "net/IP": srcs
"net/byRFC6724" -> "*"  "net/ipAttr": srcAttr
"net/byRFC6724" .|> "sort/Interface"
"net/policyTableEntry" -> "net/IPNet": Prefix
"net/pipe" *- "io/PipeReader"
"net/pipe" *- "io/PipeWriter"
"net/pipe" .|> "io/Closer"
"net/pipe" .|> "io/ReadCloser"
"net/pipe" .|> "io/ReadWriteCloser"
"net/pipe" .|> "io/WriteCloser"
"net/pipe" .|> "net/Conn"
"net/pipe" .|> "io/ReadWriter"
"net/pipe" .|> "io/Reader"
"net/pipe" .|> "io/Writer"
"net/dnsHeader" .|> "net/dnsStruct"
"net/dnsQuestion" .|> "net/dnsStruct"
"net/dnsRR_Header" .|> "net/dnsRR"
"net/dnsRR_CNAME" -> "net/dnsRR_Header": Hdr
"net/dnsRR_CNAME" .|> "net/dnsRR"
"net/dnsRR_HINFO" -> "net/dnsRR_Header": Hdr
"net/dnsRR_HINFO" .|> "net/dnsRR"
"net/dnsRR_MB" -> "net/dnsRR_Header": Hdr
"net/dnsRR_MB" .|> "net/dnsRR"
"net/dnsRR_MG" -> "net/dnsRR_Header": Hdr
"net/dnsRR_MG" .|> "net/dnsRR"
"net/dnsRR_MINFO" -> "net/dnsRR_Header": Hdr
"net/dnsRR_MINFO" .|> "net/dnsRR"
"net/dnsRR_MR" -> "net/dnsRR_Header": Hdr
"net/dnsRR_MR" .|> "net/dnsRR"
"net/dnsRR_MX" -> "net/dnsRR_Header": Hdr
"net/dnsRR_MX" .|> "net/dnsRR"
"net/dnsRR_NS" -> "net/dnsRR_Header": Hdr
"net/dnsRR_NS" .|> "net/dnsRR"
"net/dnsRR_PTR" -> "net/dnsRR_Header": Hdr
"net/dnsRR_PTR" .|> "net/dnsRR"
"net/dnsRR_SOA" -> "net/dnsRR_Header": Hdr
"net/dnsRR_SOA" .|> "net/dnsRR"
"net/dnsRR_TXT" -> "net/dnsRR_Header": Hdr
"net/dnsRR_TXT" .|> "net/dnsRR"
"net/dnsRR_SRV" -> "net/dnsRR_Header": Hdr
"net/dnsRR_SRV" .|> "net/dnsRR"
"net/dnsRR_A" -> "net/dnsRR_Header": Hdr
"net/dnsRR_A" .|> "net/dnsRR"
"net/dnsRR_AAAA" -> "net/dnsRR_Header": Hdr
"net/dnsRR_AAAA" .|> "net/dnsRR"
"net/dnsMsgHdr" .|> "net/dnsStruct"
"net/dnsMsg" *- "net/dnsMsgHdr"
"net/dnsMsg" -> "*"  "net/dnsQuestion": question
"net/dnsMsg" -> "*"  "net/dnsRR": answer
"net/dnsMsg" -> "*"  "net/dnsRR": ns
"net/dnsMsg" -> "*"  "net/dnsRR": extra
"net/dnsConn" -|> "io/Closer"
"net/sockaddr" -|> "net/Addr"
"net/Error" -|> "error"
"net/dnsRR" -|> "net/dnsStruct"

class os/File {
}

interface sort/Interface {
}

class sync/Once {
}

class sync/RWMutex {
}

class time/Time {
}

hide interface fields

@enduml
